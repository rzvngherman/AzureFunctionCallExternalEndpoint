@page "/fetchdata"
@using BlazorServerApp1.Data;
@using BlazorServerApp1.Data.WeatherForecastServiceExternal;

@inject IWeatherForecastServiceExternal _forecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Calling external endpoint from azure function</h1>

@if (_response is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>function uri '@_response.FunctionUri'</p>
    <p>external endpoint called from function '@_response.Uri3RdPartyCalled'</p>
    <p>external MethodType '@_response.MethodType'.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            
            @foreach (var forecast in _response.Uri3RdPartyResults)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ResponseDto _response;

    private List<string> EventType = new List<string>();

    // 1) OnInitialized
    // 2) OnInitializedAsync
    // 3) OnParametersSet
    // 4) OnParametersSetAsync
    // 5) ShouldRender
    // 6) OnAfterRender
    // 7) OnAfterRenderAsync

    protected override void OnInitialized()
    {
        EventType.Add(" 1 OnInit");
    }

    protected override async Task OnInitializedAsync()
    {
        //in order to see "Loading ..."
        await Task.Delay(1000);

        _response = await _forecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));

        EventType.Add("2 OnInit Async");
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("3 On Parameter set ");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add(" 4 OnParametersSet Async Started");
        await Task.Delay(1000);
    }
    protected override bool ShouldRender()
    {
        EventType.Add(" 5 Should render called");
        return true;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add(" 6 OnAfterRenderStarted");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add(" 7 OnAfterRender Async Started");
        await Task.Delay(1000);
    }
}
